#!/usr/local/bin/dock bash

# Executed when you run `dock` in the root of this repo without any arguments.
# It starts up core backend services and displays instructions for getting
# started.

cat <<MSG
===============================================================================
Downloading latest version of all images...
===============================================================================
MSG
docker-compose pull

# Ensure services are shutdown cleanly when exiting the shell
safe-shutdown() {
  docker-compose stop
}
trap safe-shutdown EXIT INT QUIT TERM

cat <<MSG
===============================================================================
Starting up backend services...
===============================================================================
MSG
docker-compose rm --force -v elasticsearch # Ensure clean index each time
docker-compose up -d elasticsearch gunicorn

# Cheat by waiting for Gunicorn to start, since it also installs all the
# python packages
echo "Waiting for packages to install..."
for tries in {0..180}; do
  if curl http://localhost:3000 -I --fail --silent >/dev/null 2>&1; then
    break
  fi
  sleep 1
done
if [ $tries = 120 ]; then
  echo "Gunicorn did not start!"
  docker logs workspace_gunicorn_1 # Can't use docker-compose logs since it follows
  exit 1
fi
docker-compose stop gunicorn

# Initialize virtualenv so we can easily run tests
source env/bin/activate

cat <<MSG
================================ INSTRUCTIONS =================================

You can view logs in this console by executing:

  docker-compose logs [elasticsearch | gunicorn]

You can restart services in this console by executing:

  docker-compose restart [elasticsearch | gunicorn]

You can run tests by executing:

  make test

===============================================================================
MSG

# Drop into a shell so the container doesn't exit. We don't `exec` since we want
# the TRAP defined above to be executed when terminating the shell.
bash
